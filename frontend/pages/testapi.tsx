import { apiEndpoint } from 'config'
import { gql, request } from 'graphql-request'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { QueryClient, useQuery } from 'react-query'
import { dehydrate } from 'react-query/hydration'

export const ALL_PRACTICEROUTINES_QUERY = gql`
  query ALL_PRACTICEROUTINES_QUERY {
    allPracticeRoutines {
      name
      id
      user {
        id
        name
        email
      }
    }
  }
`

async function getRoutines() {
  const data = await request(apiEndpoint, ALL_PRACTICEROUTINES_QUERY)
  return data.allPracticeRoutines
}

function TestList() {
  const [{ allPracticeRoutines }, setRoutines] = useState<any>({})

  useEffect(() => {
    const req = async () => {
      const data = await request(apiEndpoint, ALL_PRACTICEROUTINES_QUERY)
      setRoutines(data)
    }
    req()
  }, [])

  return (
    <div>
      {JSON.stringify(allPracticeRoutines, null, 2)}
      {allPracticeRoutines
        ? allPracticeRoutines.map((routine) => (
            <div key={routine.id}>{routine.name}</div>
          ))
        : null}
    </div>
  )
}

export default function Home() {
  const { data } = useQuery('routines', getRoutines)
  console.log('from react-query', data)

  return (
    <div>
      <Head>
        <title>El Mayo&apos;s Next.js + Tailwind starter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <TestList />
        <div className="flex items-center justify-center h-screen">
          <h1 className="text-7xl">
            Welcome to{' '}
            <a href="https://github.com/mic-meier" className="mx-auto">
              El Mayo&apos;s
            </a>{' '}
            next.js starter
          </h1>
        </div>
      </main>
      {data.map((routine) => (
        <div key={routine.id}>{routine.name}</div>
      ))}
    </div>
  )
}

export async function getServerSideProps() {
  const queryClient = new QueryClient()

  await queryClient.prefetchQuery('routines', getRoutines)

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  }
}
