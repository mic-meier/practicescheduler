type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  exercises(
    where: ExerciseWhereInput! = {}
    search: String
    sortBy: [SortExercisesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExerciseOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Exercise!]
  _exercisesMeta(
    where: ExerciseWhereInput! = {}
    search: String
    sortBy: [SortExercisesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExerciseOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use exercisesCount instead."
    )
  exercisesCount(where: ExerciseWhereInput! = {}): Int
  routines(
    where: RoutineWhereInput! = {}
    search: String
    sortBy: [SortRoutinesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoutineOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Routine!]
  _routinesMeta(
    where: RoutineWhereInput! = {}
    search: String
    sortBy: [SortRoutinesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoutineOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use routinesCount instead."
    )
  routinesCount(where: RoutineWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  exercises_every: ExerciseWhereInput
  exercises_some: ExerciseWhereInput
  exercises_none: ExerciseWhereInput
  routines_every: RoutineWhereInput
  routines_some: RoutineWhereInput
  routines_none: RoutineWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  exercises: ExerciseRelateToManyInput
  routines: RoutineRelateToManyInput
}

input ExerciseRelateToManyInput {
  create: [ExerciseCreateInput]
  connect: [ExerciseWhereUniqueInput]
  disconnect: [ExerciseWhereUniqueInput]
  disconnectAll: Boolean
}

input RoutineRelateToManyInput {
  create: [RoutineCreateInput]
  connect: [RoutineWhereUniqueInput]
  disconnect: [RoutineWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  exercises: ExerciseRelateToManyInput
  routines: RoutineRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

type Routine {
  id: ID!
  name: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: User
  exercises(
    where: ExerciseWhereInput! = {}
    search: String
    sortBy: [SortExercisesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExerciseOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Exercise!]
  _exercisesMeta(
    where: ExerciseWhereInput! = {}
    search: String
    sortBy: [SortExercisesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExerciseOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use exercisesCount instead."
    )
  exercisesCount(where: ExerciseWhereInput! = {}): Int
}

input RoutineWhereInput {
  AND: [RoutineWhereInput!]
  OR: [RoutineWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  notes: String
  notes_not: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  notes_i: String
  notes_not_i: String
  notes_contains_i: String
  notes_not_contains_i: String
  notes_starts_with_i: String
  notes_not_starts_with_i: String
  notes_ends_with_i: String
  notes_not_ends_with_i: String
  notes_in: [String]
  notes_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
  exercises_every: ExerciseWhereInput
  exercises_some: ExerciseWhereInput
  exercises_none: ExerciseWhereInput
}

input RoutineWhereUniqueInput {
  id: ID
}

enum SortRoutinesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  notes_ASC
  notes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input RoutineOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RoutineUpdateInput {
  name: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  exercises: ExerciseRelateToManyInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input RoutinesUpdateInput {
  id: ID!
  data: RoutineUpdateInput
}

input RoutineCreateInput {
  name: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  exercises: ExerciseRelateToManyInput
}

input RoutinesCreateInput {
  data: RoutineCreateInput
}

type Exercise {
  id: ID!
  name: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: User
  routines(
    where: RoutineWhereInput! = {}
    search: String
    sortBy: [SortRoutinesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoutineOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Routine!]
  _routinesMeta(
    where: RoutineWhereInput! = {}
    search: String
    sortBy: [SortRoutinesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoutineOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use routinesCount instead."
    )
  routinesCount(where: RoutineWhereInput! = {}): Int
}

enum ExerciseCategoryType {
  technique
  theory
  earTraining
  repertoire
}

input ExerciseWhereInput {
  AND: [ExerciseWhereInput!]
  OR: [ExerciseWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  category: ExerciseCategoryType
  category_not: ExerciseCategoryType
  category_in: [ExerciseCategoryType]
  category_not_in: [ExerciseCategoryType]
  duration: Int
  duration_not: Int
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  duration_in: [Int]
  duration_not_in: [Int]
  notes: String
  notes_not: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  notes_i: String
  notes_not_i: String
  notes_contains_i: String
  notes_not_contains_i: String
  notes_starts_with_i: String
  notes_not_starts_with_i: String
  notes_ends_with_i: String
  notes_not_ends_with_i: String
  notes_in: [String]
  notes_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
  routines_every: RoutineWhereInput
  routines_some: RoutineWhereInput
  routines_none: RoutineWhereInput
}

input ExerciseWhereUniqueInput {
  id: ID
  name: String
}

enum SortExercisesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  category_ASC
  category_DESC
  duration_ASC
  duration_DESC
  notes_ASC
  notes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ExerciseOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  category: OrderDirection
  duration: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExerciseUpdateInput {
  name: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  routines: RoutineRelateToManyInput
}

input ExercisesUpdateInput {
  id: ID!
  data: ExerciseUpdateInput
}

input ExerciseCreateInput {
  name: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  routines: RoutineRelateToManyInput
}

input ExercisesCreateInput {
  data: ExerciseCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput): User
  createUsers(data: [UsersCreateInput]): [User]
  updateUser(id: ID!, data: UserUpdateInput): User
  updateUsers(data: [UsersUpdateInput]): [User]
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]): [User]
  createRoutine(data: RoutineCreateInput): Routine
  createRoutines(data: [RoutinesCreateInput]): [Routine]
  updateRoutine(id: ID!, data: RoutineUpdateInput): Routine
  updateRoutines(data: [RoutinesUpdateInput]): [Routine]
  deleteRoutine(id: ID!): Routine
  deleteRoutines(ids: [ID!]): [Routine]
  createExercise(data: ExerciseCreateInput): Exercise
  createExercises(data: [ExercisesCreateInput]): [Exercise]
  updateExercise(id: ID!, data: ExerciseUpdateInput): Exercise
  updateExercises(data: [ExercisesUpdateInput]): [Exercise]
  deleteExercise(id: ID!): Exercise
  deleteExercises(ids: [ID!]): [Exercise]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  User(where: UserWhereUniqueInput!): User
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  allRoutines(
    where: RoutineWhereInput! = {}
    search: String
    sortBy: [SortRoutinesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoutineOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Routine!]
  Routine(where: RoutineWhereUniqueInput!): Routine
  _allRoutinesMeta(
    where: RoutineWhereInput! = {}
    search: String
    sortBy: [SortRoutinesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoutineOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use routinesCount instead."
    )
  routinesCount(where: RoutineWhereInput! = {}): Int
  allExercises(
    where: ExerciseWhereInput! = {}
    search: String
    sortBy: [SortExercisesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExerciseOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Exercise!]
  Exercise(where: ExerciseWhereUniqueInput!): Exercise
  _allExercisesMeta(
    where: ExerciseWhereInput! = {}
    search: String
    sortBy: [SortExercisesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ExerciseOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use exercisesCount instead."
    )
  exercisesCount(where: ExerciseWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
