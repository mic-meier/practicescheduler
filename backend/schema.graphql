input ExerciseRelateToManyInput {
  create: [ExerciseCreateInput]
  connect: [ExerciseWhereUniqueInput]
  disconnect: [ExerciseWhereUniqueInput]
  disconnectAll: Boolean
}

input RoutineRelateToManyInput {
  create: [RoutineCreateInput]
  connect: [RoutineWhereUniqueInput]
  disconnect: [RoutineWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  exercises(
    where: ExerciseWhereInput
    search: String
    sortBy: [SortExercisesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Exercise!]!
  _exercisesMeta(
    where: ExerciseWhereInput
    search: String
    sortBy: [SortExercisesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  routines(
    where: RoutineWhereInput
    search: String
    sortBy: [SortRoutinesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Routine!]!
  _routinesMeta(
    where: RoutineWhereInput
    search: String
    sortBy: [SortRoutinesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  exercises_every: ExerciseWhereInput

  """
   condition must be true for at least 1 node
  """
  exercises_some: ExerciseWhereInput

  """
   condition must be false for all nodes
  """
  exercises_none: ExerciseWhereInput

  """
   condition must be true for all nodes
  """
  routines_every: RoutineWhereInput

  """
   condition must be true for at least 1 node
  """
  routines_some: RoutineWhereInput

  """
   condition must be false for all nodes
  """
  routines_none: RoutineWhereInput
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  exercises_ASC
  exercises_DESC
  routines_ASC
  routines_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  exercises: ExerciseRelateToManyInput
  routines: RoutineRelateToManyInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  exercises: ExerciseRelateToManyInput
  routines: RoutineRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Routine {
  id: ID!
  name: String
  slug: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: User
  exercises(
    where: ExerciseWhereInput
    search: String
    sortBy: [SortExercisesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Exercise!]!
  _exercisesMeta(
    where: ExerciseWhereInput
    search: String
    sortBy: [SortExercisesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input RoutineWhereInput {
  AND: [RoutineWhereInput]
  OR: [RoutineWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  slug: String
  slug_not: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  slug_i: String
  slug_not_i: String
  slug_contains_i: String
  slug_not_contains_i: String
  slug_starts_with_i: String
  slug_not_starts_with_i: String
  slug_ends_with_i: String
  slug_not_ends_with_i: String
  slug_in: [String]
  slug_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  notes: String
  notes_not: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  notes_i: String
  notes_not_i: String
  notes_contains_i: String
  notes_not_contains_i: String
  notes_starts_with_i: String
  notes_not_starts_with_i: String
  notes_ends_with_i: String
  notes_not_ends_with_i: String
  notes_in: [String]
  notes_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean

  """
   condition must be true for all nodes
  """
  exercises_every: ExerciseWhereInput

  """
   condition must be true for at least 1 node
  """
  exercises_some: ExerciseWhereInput

  """
   condition must be false for all nodes
  """
  exercises_none: ExerciseWhereInput
}

input RoutineWhereUniqueInput {
  id: ID!
}

enum SortRoutinesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  notes_ASC
  notes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  user_ASC
  user_DESC
  exercises_ASC
  exercises_DESC
}

input RoutineUpdateInput {
  name: String
  slug: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  exercises: ExerciseRelateToManyInput
}

input RoutinesUpdateInput {
  id: ID!
  data: RoutineUpdateInput
}

input RoutineCreateInput {
  name: String
  slug: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  exercises: ExerciseRelateToManyInput
}

input RoutinesCreateInput {
  data: RoutineCreateInput
}

enum ExerciseCategoryType {
  technique
  theory
  earTraining
  repertoire
}

"""
 A keystone list
"""
type Exercise {
  id: ID!
  name: String
  slug: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: User
  routines(
    where: RoutineWhereInput
    search: String
    sortBy: [SortRoutinesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Routine!]!
  _routinesMeta(
    where: RoutineWhereInput
    search: String
    sortBy: [SortRoutinesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input ExerciseWhereInput {
  AND: [ExerciseWhereInput]
  OR: [ExerciseWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  slug: String
  slug_not: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  slug_i: String
  slug_not_i: String
  slug_contains_i: String
  slug_not_contains_i: String
  slug_starts_with_i: String
  slug_not_starts_with_i: String
  slug_ends_with_i: String
  slug_not_ends_with_i: String
  slug_in: [String]
  slug_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  category: ExerciseCategoryType
  category_not: ExerciseCategoryType
  category_in: [ExerciseCategoryType]
  category_not_in: [ExerciseCategoryType]
  duration: Int
  duration_not: Int
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  duration_in: [Int]
  duration_not_in: [Int]
  notes: String
  notes_not: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  notes_i: String
  notes_not_i: String
  notes_contains_i: String
  notes_not_contains_i: String
  notes_starts_with_i: String
  notes_not_starts_with_i: String
  notes_ends_with_i: String
  notes_not_ends_with_i: String
  notes_in: [String]
  notes_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean

  """
   condition must be true for all nodes
  """
  routines_every: RoutineWhereInput

  """
   condition must be true for at least 1 node
  """
  routines_some: RoutineWhereInput

  """
   condition must be false for all nodes
  """
  routines_none: RoutineWhereInput
}

input ExerciseWhereUniqueInput {
  id: ID!
}

enum SortExercisesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  category_ASC
  category_DESC
  duration_ASC
  duration_DESC
  notes_ASC
  notes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  user_ASC
  user_DESC
  routines_ASC
  routines_DESC
}

input ExerciseUpdateInput {
  name: String
  slug: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  routines: RoutineRelateToManyInput
}

input ExercisesUpdateInput {
  id: ID!
  data: ExerciseUpdateInput
}

input ExerciseCreateInput {
  name: String
  slug: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
  routines: RoutineRelateToManyInput
}

input ExercisesCreateInput {
  data: ExerciseCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Routine item.
  """
  createRoutine(data: RoutineCreateInput): Routine

  """
   Create multiple Routine items.
  """
  createRoutines(data: [RoutinesCreateInput]): [Routine]

  """
   Update a single Routine item by ID.
  """
  updateRoutine(id: ID!, data: RoutineUpdateInput): Routine

  """
   Update multiple Routine items by ID.
  """
  updateRoutines(data: [RoutinesUpdateInput]): [Routine]

  """
   Delete a single Routine item by ID.
  """
  deleteRoutine(id: ID!): Routine

  """
   Delete multiple Routine items by ID.
  """
  deleteRoutines(ids: [ID!]): [Routine]

  """
   Create a single Exercise item.
  """
  createExercise(data: ExerciseCreateInput): Exercise

  """
   Create multiple Exercise items.
  """
  createExercises(data: [ExercisesCreateInput]): [Exercise]

  """
   Update a single Exercise item by ID.
  """
  updateExercise(id: ID!, data: ExerciseUpdateInput): Exercise

  """
   Update multiple Exercise items by ID.
  """
  updateExercises(data: [ExercisesUpdateInput]): [Exercise]

  """
   Delete a single Exercise item by ID.
  """
  deleteExercise(id: ID!): Exercise

  """
   Delete multiple Exercise items by ID.
  """
  deleteExercises(ids: [ID!]): [Exercise]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [User]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Routine items which match the where clause.
  """
  allRoutines(
    where: RoutineWhereInput
    search: String
    sortBy: [SortRoutinesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Routine]

  """
   Search for the Routine item with the matching ID.
  """
  Routine(where: RoutineWhereUniqueInput!): Routine

  """
   Perform a meta-query on all Routine items which match the where clause.
  """
  _allRoutinesMeta(
    where: RoutineWhereInput
    search: String
    sortBy: [SortRoutinesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Exercise items which match the where clause.
  """
  allExercises(
    where: ExerciseWhereInput
    search: String
    sortBy: [SortExercisesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Exercise]

  """
   Search for the Exercise item with the matching ID.
  """
  Exercise(where: ExerciseWhereUniqueInput!): Exercise

  """
   Perform a meta-query on all Exercise items which match the where clause.
  """
  _allExercisesMeta(
    where: ExerciseWhereInput
    search: String
    sortBy: [SortExercisesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
